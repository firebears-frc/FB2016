// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firebears.subsystems;

import org.firebears.RobotMap;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class DefenseBuster extends PIDSubsystem {

	/** Minimum value that the setpoint may take, measured in volts. */
	final double min_value = 1.80;

	/** Maximum value that the setpoint may take, measured in volts. */
	final double max_value = 3.72;

	/** Maximum speed that the motor can turn, in the range 0.0 to 1.0. */
	final double max_speed = 1.0;


    public DefenseBuster() {
		super(0.5, 0, 0);
		getPIDController().setInputRange(min_value, max_value);
		getPIDController().setAbsoluteTolerance(0.01);
		setSetpoint(min_value);
		getPIDController().enable();
		LiveWindow.addActuator("defenseBuster", "PIDSubsystem Controller", getPIDController());
	}

    private CANTalon angleMotor = RobotMap.defenseBusterAngleMotor;
    private AnalogInput pot = RobotMap.defenseBusterAnalogInput;

    public void initDefaultCommand() {
    }

	@Override
	protected double returnPIDInput() {
		return pot.getAverageVoltage();
	}

	@Override
	protected void usePIDOutput(double output) {
		output = Math.max((max_speed*-1), Math.min(output, max_speed));
		angleMotor.set(output);

	}
}


// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.firebears.subsystems;


import static org.firebears.RobotMap.getPreferencesDouble;

import org.firebears.RobotMap;
import org.firebears.util.SoftFuse;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class Bail extends PIDSubsystem {

	/** Minimum value that the setpoint may take, measured in volts. */
	public double MIN_VALUE;

	/** Maximum value that the setpoint may take, measured in volts. */
	public double MAX_VALUE;
	
	public double PRE_SHOOT_VALUE;

	public double PARK_VALUE;	

	/** Maximum speed that the motor can turn, in the range 0.0 to 1.0. */
	public double MAX_SPEED;
	
	SoftFuse softFuse;
	
	public Bail() {
//		super(0.5, 0, 0);
		super(1.5, 0.03, 5.0);

		MAX_SPEED = 1.;
		MIN_VALUE = getPreferencesDouble(RobotMap.PREF_BAIL_MIN_VALUE,1.6);  // Pot value to reset bail onto the floor
		PRE_SHOOT_VALUE = getPreferencesDouble(RobotMap.PREF_BAIL_PRESHOOT_VALUE,1.35);  // Pot value to hold ball before shooting
		PARK_VALUE = getPreferencesDouble(RobotMap.PREF_BAIL_PARK_VALUE,1.2); // Pot value to hold onto the ball while driving
		MAX_VALUE = getPreferencesDouble(RobotMap.PREF_BAIL_MAX_VALUE,1.2);  // Pot value to fire the ball

		
		softFuse = new SoftFuse(bail, 40, 1, 2);

		getPIDController().setInputRange(MAX_SPEED, MIN_VALUE);
		getPIDController().setAbsoluteTolerance(0.01);
		getPIDController().setToleranceBuffer(8);
		setSetpoint(PARK_VALUE);
		getPIDController().enable();
		softFuse.positionFuse(bail.getOutputCurrent());

		LiveWindow.addActuator("bail", "PIDSubsystem Controller", getPIDController());
	}

	private final CANTalon bail = RobotMap.bail;
	private final AnalogInput pot = RobotMap.bailPos;

	public void initDefaultCommand() {
	}

	@Override
	protected double returnPIDInput() {
		return pot.getAverageVoltage();
	}

	@Override
	protected void usePIDOutput(double output) {
		output = Math.max((MAX_SPEED * -1), Math.min(output, MAX_SPEED));
		bail.set(-2 * output);
	}

	/** Lower the bail so we can pick up the ball. */
	public void reset(){
		System.out.println("Bail.Reset");
		setSetpoint(MIN_VALUE);
		softFuse.positionFuse(bail.getOutputCurrent());
	}
	
	/** Raise the bail slightly to hold onto the ball. */
	public void hold(){
		System.out.println("Bail.hold");
		setSetpoint(PARK_VALUE);
		softFuse.positionFuse(bail.getOutputCurrent());
	}
	
	/** Lower ball just before shooting */
	public void preShoot(){
		System.out.println("Bail.preshoot");
		setSetpoint(PRE_SHOOT_VALUE);
		softFuse.positionFuse(bail.getOutputCurrent());
	}
	
	/** Raise the bail to fire the shooter. */
	public void fire(){
		System.out.println("Bail.fire/max");
		setSetpoint(MAX_VALUE);
		softFuse.positionFuse(bail.getOutputCurrent());
	}
	
	@Override
	public boolean onTarget() {
		return (returnPIDInput() - getPIDController().getSetpoint() < .05);
	}

}
